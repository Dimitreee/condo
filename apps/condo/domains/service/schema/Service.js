/**
 * Generated by `createschema service.Service 'name:Text; description?:Text; avatar?:Text; website?:Text; developer?:Text; type:Text; isHidden?:Checkbox; meta?:Json;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/service/access/Service')


const Service = new GQLListSchema('Service', {
    // TODO(codegen): write doc for the Service domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        name: {
            // TODO(codegen): write doc for Service.name field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        type: {
            // TODO(codegen): write doc for Service.type field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        description: {
            // TODO(codegen): write doc for Service.description field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        avatar: {
            // TODO(codegen): write doc for Service.avatar field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        website: {
            // TODO(codegen): write doc for Service.website field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        developer: {
            // TODO(codegen): write doc for Service.developer field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        isHidden: {
            // TODO(codegen): write doc for Service.isHidden field!
            schemaDoc: 'TODO DOC!',
            type: Checkbox,
        },

        meta: {
            // TODO(codegen): write doc for Service.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadServices,
        create: access.canManageServices,
        update: access.canManageServices,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Service,
}
