/**
 * Generated by `createservice billing.CheckOrganizationIntegrationContextExistService --type queries`
 */
import { expectToThrowAccessDeniedErrorToResult } from '@condo/domains/common/utils/testSchema'

const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeContextWithOrganizationAndIntegrationAsAdmin } = require('../utils/testSchema')
const { expectToThrowAuthenticationErrorToResult } = require('@condo/domains/common/utils/testSchema')
const { makeClient, makeLoggedInAdminClient, makeLoggedInClient } = require('@core/keystone/test.utils')

const { checkOrganizationIntegrationContextExistByTestClient } = require('@condo/domains/billing/utils/testSchema')
 
describe('CheckOrganizationIntegrationContextExistService', () => {
    test('user get isFound: true execute with existing organization', async () => {
        const admin = await makeLoggedInAdminClient()
        const client = await makeLoggedInClient()

        const [organization] = await createTestOrganization(admin)

        const payload = {
            organizationId: organization.id,
        }
        const [data] = await checkOrganizationIntegrationContextExistByTestClient(client, payload)

        expect(data.isFound).toEqual(false)
    })

    test('user get isFound: false when execute without existing organization', async () => {
        const client = await makeLoggedInClient()

        const { organization } = await makeContextWithOrganizationAndIntegrationAsAdmin()

        const payload = {
            organizationId: organization.id,
        }
        const [data] = await checkOrganizationIntegrationContextExistByTestClient(client, payload)

        expect(data.isFound).toEqual(true)
    })

    test('anonymous cant execute query', async () => {
        const client = await makeClient()

        const { organization } = await makeContextWithOrganizationAndIntegrationAsAdmin()
        const payload = {
            organizationId: organization.id,
        }

        await expectToThrowAuthenticationErrorToResult(async () => {
            await checkOrganizationIntegrationContextExistByTestClient(client, payload)
        })
    })
})