/**
 * Generated by `createservice ticket.ReopenTicketService --type mutations`
 */

const { GQLCustomSchema, getById } = require('@core/keystone/schema')
const access = require('@condo/domains/ticket/access/ReopenTicketService')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@core/keystone/errors')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { Ticket } = require('../utils/serverSchema')
const { STATUS_IDS } = require('../constants/statusTransitions')
const get = require('lodash/get')
const { TICKET_STATUS_MUST_BE_COMPLETED_MESSAGE } = require('@condo/domains/ticket/constants/errors')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const errors = {
    TICKET_STATUS_MUST_BE_COMPLETED: {
        mutation: 'reopenTicket',
        code: BAD_USER_INPUT,
        type: 'TICKET_STATUS_MUST_BE_COMPLETED',
        message: TICKET_STATUS_MUST_BE_COMPLETED_MESSAGE,
    },
}

const ReopenTicketService = new GQLCustomSchema('ReopenTicketService', {
    types: [
        {
            access: true,
            type: 'input ReopenTicketInput { dv: Int!, sender: SenderFieldInput!, ticketId: ID! }',
        },
        {
            access: true,
            type: 'type ReopenTicketOutput { id: ID }',
        },
    ],
    
    mutations: [
        {
            access: access.canReopenTicket,
            schemaDoc: 'Transfer of the ticket from the status "Completed" to the status "Open" through the resident\'s mobile application',
            schema: 'reopenTicket(data: ReopenTicketInput!): ReopenTicketOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { ticketId, dv, sender } } = args
                const ticket = await Ticket.getOne(context, { id: ticketId })
                const ticketStatusId = get(ticket, ['status', 'id'])

                if (ticketStatusId !== STATUS_IDS.COMPLETED) {
                    throw new GQLError(errors.TICKET_STATUS_MUST_BE_COMPLETED)
                }

                const updatedTicket = await Ticket.update(context, ticketId, {
                    status: { connect: { id: STATUS_IDS.OPEN } },
                    dv,
                    sender,
                })

                return {
                    id: updatedTicket.id,
                }
            },
        },
    ],
    
})

module.exports = {
    ReopenTicketService,
}
