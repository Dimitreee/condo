/**
 * Generated by `createservice ticket.ReopenTicketService --type mutations`
 */

const faker = require('faker')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAuthenticationErrorToObj, expectToThrowAccessDeniedErrorToResult, expectToThrowMutationError,
} = require('@condo/domains/common/utils/testSchema')

const { reopenTicketByTestClient, createTestTicket, updateTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithProperty, makeClientWithResidentAccessAndProperty, createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { STATUS_IDS } = require('../constants/statusTransitions')
const { expectToThrowAuthenticationErrorToResult } = require('../../common/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { Ticket } = require('../utils/testSchema')
const { makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestContact } = require('@condo/domains/contact/utils/testSchema')
const { TICKET_STATUS_MUST_BE_COMPLETED_MESSAGE } = require('@condo/domains/ticket/constants/errors')
 
describe('ReopenTicketService', () => {
    test('anonymous: execute', async () => {
        const client = await makeClient()
        const user = await makeClientWithProperty()
        const [ticket] = await createTestTicket(user, user.organization, user.property, {
            status: { connect: { id: STATUS_IDS.COMPLETED } },
        })

        await expectToThrowAuthenticationErrorToResult(async () => {
            await reopenTicketByTestClient(client, {
                ticketId: ticket.id,
            })
        })
    })
 
    test('admin: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const user = await makeClientWithProperty()
        const [ticket] = await createTestTicket(user, user.organization, user.property, {
            status: { connect: { id: STATUS_IDS.COMPLETED } },
        })

        const [data] = await reopenTicketByTestClient(admin, {
            ticketId: ticket.id,
        })

        expect(data.id).toEqual(ticket.id)
    })

    test('resident: can reopen his completed ticket', async () => {
        const admin = await makeLoggedInAdminClient()
        const residentClient = await makeClientWithResidentAccessAndProperty()
        const unitName = faker.random.alphaNumeric(5)
        await createTestResident(admin, residentClient.user, residentClient.organization, residentClient.property, {
            unitName,
        })

        const [ticket] = await createTestTicket(residentClient, residentClient.organization, residentClient.property, {
            unitName,
            status: { connect: { id: STATUS_IDS.COMPLETED } },
        })

        await reopenTicketByTestClient(residentClient, {
            ticketId: ticket.id,
        })

        const [reopenedTicket] = await Ticket.getAll(residentClient, {
            id: ticket.id,
        })

        expect(reopenedTicket.id).toEqual(ticket.id)
        expect(reopenedTicket.statusReopenedCounter).toEqual(1)
        expect(reopenedTicket.status.id).toEqual(STATUS_IDS.OPEN)
    })

    test('resident: can reopen completed ticket from crm with resident phone matches ticket contact phone', async () => {
        const admin = await makeLoggedInAdminClient()
        const residentClient = await makeClientWithResidentUser()

        const [organization] = await createTestOrganization(admin)
        const [property] = await createTestProperty(admin, organization)
        const unitName = faker.random.alphaNumeric(5)
        const { phone } = residentClient.userAttrs

        await createTestResident(admin, residentClient.user, organization, property, {
            unitName,
        })
        const [contact] = await createTestContact(admin, organization, property, {
            phone,
            unitName,
        })
        const [ticket] = await createTestTicket(admin, organization, property, {
            unitName,
            contact: { connect: { id: contact.id } },
            canReadByResident: true,
            status: { connect: { id: STATUS_IDS.COMPLETED } },
        })

        await reopenTicketByTestClient(residentClient, {
            ticketId: ticket.id,
        })

        const [reopenedTicket] = await Ticket.getAll(residentClient, {
            id: ticket.id,
        })

        expect(reopenedTicket.id).toEqual(ticket.id)
        expect(reopenedTicket.statusReopenedCounter).toEqual(1)
        expect(reopenedTicket.status.id).toEqual(STATUS_IDS.OPEN)
    })

    test('resident: cannot reopen not his ticket', async () => {
        const admin = await makeLoggedInAdminClient()
        const residentClient = await makeClientWithResidentAccessAndProperty()
        const residentClient1 = await makeClientWithResidentAccessAndProperty()
        const unitName = faker.random.alphaNumeric(5)
        await createTestResident(admin, residentClient.user, residentClient.organization, residentClient.property, {
            unitName,
        })
        await createTestResident(admin, residentClient1.user, residentClient1.organization, residentClient1.property, {
            unitName,
        })

        const [ticket] = await createTestTicket(residentClient1, residentClient1.organization, residentClient1.property, {
            unitName,
            status: { connect: { id: STATUS_IDS.COMPLETED } },
        })

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await reopenTicketByTestClient(residentClient, {
                ticketId: ticket.id,
            })
        })
    })

    test('resident: cannot reopen not completed ticket', async () => {
        const admin = await makeLoggedInAdminClient()
        const residentClient = await makeClientWithResidentAccessAndProperty()
        const unitName = faker.random.alphaNumeric(5)
        await createTestResident(admin, residentClient.user, residentClient.organization, residentClient.property, {
            unitName,
        })

        const [ticket] = await createTestTicket(residentClient, residentClient.organization, residentClient.property, {
            unitName,
            status: { connect: { id: STATUS_IDS.IN_PROGRESS } },
        })

        await expectToThrowMutationError(async () =>
            await reopenTicketByTestClient(residentClient, {
                ticketId: ticket.id,
            })
        , TICKET_STATUS_MUST_BE_COMPLETED_MESSAGE)
    })
})