// noinspection DuplicatedCode

/**
 * Generated by `createschema notification.PushToken PushToken`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, makeLoggedInClient } = require('@core/keystone/test.utils')

// const { JSON_UNKNOWN_VERSION_ERROR, REQUIRED_NO_VALUE_ERROR, JSON_EXPECT_OBJECT_ERROR } = require('@condo/domains/common/constants/errors')
const {
    expectToThrowValidationFailureError,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowMutationError,
} = require('@condo/domains/common/utils/testSchema')

const { PushToken, createTestPushToken, updateTestPushToken  } = require('@condo/domains/notification/utils/testSchema')

const DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE = 'duplicate key value violates unique constraint'

describe('PushToken', () => {
    test('anonymous: direct create PushToken access denied', async () => {
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestPushToken(client)
        })
    })

    test('user: direct create PushToken access denied', async () => {
        const client = await makeLoggedInClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestPushToken(client)
        })
    })

    test('admin: direct create PushToken allowed', async () => {
        const admin = await makeLoggedInAdminClient()

        const [obj, attrs] = await createTestPushToken(admin)

        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
        expect(obj.owner.id).toEqual(admin.user.id)
    })

    test('admin: deviceId is required ', async () => {
        const admin = await makeLoggedInAdminClient()

        await expectToThrowValidationFailureError( async () => {
            await createTestPushToken(admin, { deviceId: null })
        })
    })

    test('admin: token is required ', async () => {
        const admin = await makeLoggedInAdminClient()

        await expectToThrowValidationFailureError( async () => {
            await createTestPushToken(admin, { token: null })
        })
    })

    test('admin: serviceType is required ', async () => {
        const admin = await makeLoggedInAdminClient()

        await expectToThrowValidationFailureError( async () => {
            await createTestPushToken(admin, { serviceType: null })
        })
    })

    test('anonymous: fails to read other`s PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const [token] = await createTestPushToken(admin)
        const client1 = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await PushToken.getOne(client1, { id: token.id })
        })
    })

    test('user: fails to read other`s PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const client = await makeLoggedInClient()
        const [token] = await createTestPushToken(admin)
        const othersToken = await PushToken.getOne(client, { id: token.id })

        expect(othersToken).toBeUndefined()
    })

    test('admin: able to read other`s PushTokens', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin2 = await makeLoggedInAdminClient()
        const [token] = await createTestPushToken(admin)
        const obj = await PushToken.getOne(admin2, { id: token.id })

        expect(obj).toBeDefined()
        expect(obj).not.toBeNull()
        expect(obj.id).toEqual(token.id)
        expect(obj.deviceId).toEqual(token.deviceId)
        expect(obj.serviceType).toEqual(token.serviceType)
        expect(obj.token).toEqual(token.token)
        expect(obj.owner.id).toEqual(admin.user.id)
    })

    test('user: can read own PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const [token] = await createTestPushToken(admin)
        const lastToken = await PushToken.getOne(admin, { id: token.id })

        expect(lastToken).toBeDefined()
        expect(lastToken.id).toEqual(token.id)
        expect(lastToken.owner.id).toEqual(admin.user.id)
    })

    test('anonymous: fails to read PushTokens', async () => {
        const client = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await PushToken.getAll(client)
        })
    })

    test('admin: deviceId is unique', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin1 = await makeLoggedInAdminClient()
        const [objCreated] = await createTestPushToken(admin)

        await expectToThrowMutationError(
            async () => await createTestPushToken(admin1, { deviceId: objCreated.deviceId }),
            DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            ['obj']
        )
    })

    test('admin: token is unique', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin1 = await makeLoggedInAdminClient()
        const [objCreated] = await createTestPushToken(admin)

        await expectToThrowMutationError(
            async () => await createTestPushToken(admin1, { token: objCreated.token }),
            DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            ['obj']
        )
    })

    test('admin: update PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin1 = await makeLoggedInAdminClient()
        const [objCreated] = await createTestPushToken(admin)
        const payload = { owner: { disconnectAll: true, connect: { id: admin1.user.id } } }
        const [objUpdated] = await updateTestPushToken(admin1, objCreated.id, payload)

        expect(objUpdated.id).toEqual(objCreated.id)
        expect(objUpdated.owner.id).toEqual(admin1.user.id)
    })

    test('anonymous: fails to update PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestPushToken(admin)
        const client = await makeClient()
        const payload = { owner: { disconnectAll: true } }

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestPushToken(client, objCreated.id, payload)
        })
    })

    test('user: fails to update PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestPushToken(admin)
        const client = await makeLoggedInClient()
        const payload = { owner: { disconnectAll: true } }

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestPushToken(client, objCreated.id, payload)
        })
    })

    test('anonymous: fails to delete PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestPushToken(admin)
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await PushToken.delete(client, objCreated.id)
        })
    })

    test('user: fails to delete PushToken', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestPushToken(admin)
        const client = await makeLoggedInClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await PushToken.delete(client, objCreated.id)
        })
    })
})
