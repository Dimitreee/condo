/**
 * Generated by `createservice notification.DisconnectUserFromDeviceService --type mutations`
 */
const { makeLoggedInAdminClient, makeClient, makeLoggedInClient } = require('@core/keystone/test.utils')

const { disconnectUserFromDeviceByTestClient, syncDeviceByTestClient, Device: DeviceAPI} = require('@condo/domains/notification/utils/testSchema')

const { getRandomTokenData } = require('./helpers')

describe('DisconnectUserFromDeviceService', () => {
    describe('anonymous', () => {
        it('allows to disconnect user from device', async () => {
            const user = await makeLoggedInClient()
            const client = await makeClient()
            const admin = await makeLoggedInAdminClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const { deviceId, pushTransport } = payload
            const [data] = await syncDeviceByTestClient(user, payload)

            expect(data.id).toBeDefined()
            expect(data.owner.id).toEqual(user.user.id)

            const [data1] = await disconnectUserFromDeviceByTestClient(client, { deviceId, pushTransport })

            expect(data1.id).toEqual(data.id)

            const data2 = await DeviceAPI.getOne(admin, { id: data.id })

            expect(data2.owner).toBeNull()
        })
    })

    describe('user', () => {
        it('allows to disconnect user from device', async () => {
            const user = await makeLoggedInClient()
            const user1 = await makeLoggedInClient()
            const admin = await makeLoggedInAdminClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const { deviceId, pushTransport } = payload
            const [data] = await syncDeviceByTestClient(user, payload)

            expect(data.id).toBeDefined()
            expect(data.owner.id).toEqual(user.user.id)

            const [data1] = await disconnectUserFromDeviceByTestClient(user1, { deviceId, pushTransport })

            expect(data1.id).toEqual(data.id)

            const data2 = await DeviceAPI.getOne(admin, { id: data.id })

            expect(data2.owner).toBeNull()
        })
    })

})