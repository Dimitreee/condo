/**
 * Generated by `createservice notification.SyncNotifiableDeviceService --type mutations`
 */

const get = require('lodash/get')

const { GQLCustomSchema } = require('@core/keystone/schema')

const access = require('@condo/domains/notification/access/SyncNotifiableDeviceService')
const { NotifiableDevice: NotifiableDeviceAPI } = require('@condo/domains/notification/utils/serverSchema')

const resolveSyncNotifiableDevice = async (parent, args, context) => {
    const { data: { dv, sender, deviceId, token, serviceType, meta } } = args
    const userId = get(context, 'authedItem.id', null)
    const owner = userId ? { disconnectAll: true, connect: { id: userId } } : null

    const attrs = { dv, sender, deviceId, token, serviceType, meta, owner }
    const where = { deviceId, serviceType }

    return NotifiableDeviceAPI.updateOrCreate(context, where, attrs)
}

const SyncNotifiableDeviceService = new GQLCustomSchema('SyncNotifiableDeviceService', {
    types: [
        {
            access: true,
            type: 'input SyncNotifiableDeviceInput { dv: Int!, sender: SenderFieldInput!, deviceId: String!, token: String, serviceType: String, meta: JSON }',
        },
        {
            access: true,
            type: 'type SyncNotifiableDeviceOutput { id: ID!, deviceId: String!, token: String, serviceType: String, owner: User, meta: JSON }',
        },
    ],
    
    mutations: [
        {
            access: access.canSyncNotifiableDevice,
            schema: 'syncNotifiableDevice(data: SyncNotifiableDeviceInput!): SyncNotifiableDeviceOutput',
            resolver: resolveSyncNotifiableDevice,
        },
    ],
    
})

module.exports = {
    SyncNotifiableDeviceService,
}
