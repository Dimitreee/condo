/**
 * Generated by `createservice notification.RegisterPushNotificationTokenService --type mutations`
 */

const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient } = require('@core/keystone/test.utils')

const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')

const { registerPushNotificationTokenByTestClient } = require('@condo/domains/notification/utils/testSchema')
 
describe('RegisterPushNotificationTokenService', () => {
    test('anonymous: execute', async () => {
        const client = await makeClient()
        const payload = {
            deviceId: faker.datatype.uuid(),
            token: faker.datatype.uuid(),
            serviceType: 'Huawei',
        }
        const [data, attrs] = await registerPushNotificationTokenByTestClient(client, payload)

        expect(data.id).not.toBeFalsy()
        expect(data.deviceId).toEqual(payload.deviceId)
        expect(data.token).toEqual(payload.token)
        expect(data.serviceType).toEqual(payload.serviceType)
        expect(data.user).toBeNull()
    })
 
    test('authorized: execute', async () => {
        const client = await makeLoggedInClient()

        const payload = {
            deviceId: faker.datatype.uuid(),
            token: faker.datatype.uuid(),
            serviceType: 'Huawei',
        }
        const [data] = await registerPushNotificationTokenByTestClient(client, payload)

        expect(data.id).not.toBeFalsy()
        expect(data.deviceId).toEqual(payload.deviceId)
        expect(data.token).toEqual(payload.token)
        expect(data.serviceType).toEqual(payload.serviceType)
        expect(data.user).toEqual(client.user.id)
    })
 
    test('admin: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const payload = {}  // TODO(codegen): change the 'user: update RegisterPushNotificationTokenService' payload
        const [data, attrs] = await registerPushNotificationTokenByTestClient(admin, payload)
        // TODO(codegen): write admin expect logic
        throw new Error('Not implemented yet')
    })
})