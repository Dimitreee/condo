/**
 * Generated by `createservice notification.DisconnectUserFromDeviceService --type mutations`
 */
const get = require('lodash/get')

const { GQLCustomSchema } = require('@core/keystone/schema')

const access = require('@condo/domains/notification/access/DisconnectUserFromDeviceService')
const { Device: DeviceAPI } = require('@condo/domains/notification/utils/serverSchema')

const { PUSH_TRANSPORT_TYPES } = require('../constants/constants')

const DisconnectUserFromDeviceService = new GQLCustomSchema('DisconnectUserFromDeviceService', {
    types: [
        {
            access: true,
            type: `enum PushTransportType { ${PUSH_TRANSPORT_TYPES.join(' ')} }`,
        },
        {
            access: true,
            type: 'input DisconnectUserFromDeviceInput { dv: Int!, sender: SenderFieldInput!, deviceId: String!, pushTransport: PushTransportType! }',
        },
        {
            access: true,
            type: 'type DisconnectUserFromDeviceOutput { id: ID }',
        },
    ],
    
    mutations: [
        {
            access: access.canDisconnectUserFromDevice,
            schema: 'disconnectUserFromDevice(data: DisconnectUserFromDeviceInput!): DisconnectUserFromDeviceOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { dv, sender, deviceId, pushTransport } } = args
                const attrs = { dv, sender, owner: { disconnectAll: true } }
                const existingItem = await DeviceAPI.getOne(context, { deviceId, pushTransport })

                if (!existingItem) throw new Error('Unable to find record containing combination of provided deviceId and pushTransport.')

                const data = await DeviceAPI.update(context, existingItem.id, attrs)

                return { id: get(data, 'id', null) }
            },
        },
    ],
    
})

module.exports = {
    DisconnectUserFromDeviceService,
}
