/**
 * Generated by `createschema notification.NotifiableDevice 'deviceId:Text; token?:Text; serviceType?:Select:firebase,apple,huawei; owner?:Relationship:User:SET_NULL; meta?:Json'`
 */
const faker = require('faker')
const sample = require('lodash/sample')

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const {
    expectToThrowValidationFailureError,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowMutationError,
    expectToThrowUserInputError,
} = require('@condo/domains/common/utils/testSchema')
const {
    DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
} = require('@condo/domains/common/constants/errors')

const { NotifiableDevice, createTestNotifiableDevice, updateTestNotifiableDevice } = require('@condo/domains/notification/utils/testSchema')

const { DEVICE_SERVICE_TYPE_KEYS } = require('../constants/constants')

describe('NotifiableDevice', () => {
    test('anonymous: direct create NotifiableDevice access denied', async () => {
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestNotifiableDevice(client)
        })
    })

    test('user: direct create NotifiableDevice access denied', async () => {
        const client = await makeLoggedInClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestNotifiableDevice(client)
        })
    })

    test('admin: direct create NotifiableDevice allowed', async () => {
        const admin = await makeLoggedInAdminClient()

        const [obj, attrs] = await createTestNotifiableDevice(admin)

        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
        expect(obj.owner.id).toEqual(admin.user.id)
    })

    test('admin: deviceId is required', async () => {
        const admin = await makeLoggedInAdminClient()

        await expectToThrowValidationFailureError( async () => {
            await createTestNotifiableDevice(admin, { deviceId: null })
        })
    })

    test('admin: token is not required by itself', async () => {
        const admin = await makeLoggedInAdminClient()

        const [obj, attrs] = await createTestNotifiableDevice(admin, { token: null })

        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
        expect(obj.owner.id).toEqual(admin.user.id)
        expect(obj.token).toBeNull()
    })

    test('admin: serviceType is required', async () => {
        const admin = await makeLoggedInAdminClient()

        await expectToThrowValidationFailureError(async () => {
            const extraAttrs = { serviceType: null }

            await createTestNotifiableDevice(admin, extraAttrs)
        })
    })

    test('admin: invalid serviceType value', async () => {
        const admin = await makeLoggedInAdminClient()
        const extraAttrs = { serviceType: 'xxxxxxx' }

        await expectToThrowUserInputError(
            async () => await createTestNotifiableDevice(admin, extraAttrs),
            `got invalid value "${extraAttrs.serviceType}" at "data.serviceType";`,
        )
    })

    test('anonymous: fails to read other`s NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const [token] = await createTestNotifiableDevice(admin)
        const client1 = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await NotifiableDevice.getOne(client1, { id: token.id })
        })
    })

    test('user: fails to read other`s NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const client = await makeLoggedInClient()
        const [token] = await createTestNotifiableDevice(admin)
        const othersDevice = await NotifiableDevice.getOne(client, { id: token.id })

        expect(othersDevice).toBeUndefined()
    })

    test('admin: able to read other`s NotifiableDevices', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin2 = await makeLoggedInAdminClient()
        const [token] = await createTestNotifiableDevice(admin)
        const obj = await NotifiableDevice.getOne(admin2, { id: token.id })

        expect(obj).toBeDefined()
        expect(obj).not.toBeNull()
        expect(obj.id).toEqual(token.id)
        expect(obj.deviceId).toEqual(token.deviceId)
        expect(obj.serviceType).toEqual(token.serviceType)
        expect(obj.token).toEqual(token.token)
        expect(obj.owner.id).toEqual(admin.user.id)
    })

    test('user: can read own NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const [token] = await createTestNotifiableDevice(admin)
        const lastDevice = await NotifiableDevice.getOne(admin, { id: token.id })

        expect(lastDevice).toBeDefined()
        expect(lastDevice.id).toEqual(token.id)
        expect(lastDevice.owner.id).toEqual(admin.user.id)
    })

    test('anonymous: fails to read NotifiableDevices', async () => {
        const client = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await NotifiableDevice.getAll(client)
        })
    })

    test('admin: deviceId + serviceType is unique', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin1 = await makeLoggedInAdminClient()
        const [objCreated] = await createTestNotifiableDevice(admin)
        const extraAttrs = { deviceId: objCreated.deviceId, serviceType: objCreated.serviceType }

        await expectToThrowMutationError(
            async () => await createTestNotifiableDevice(admin1, extraAttrs),
            DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            ['obj']
        )
    })

    test('admin: token is unique', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin1 = await makeLoggedInAdminClient()
        const extraAttrs = { token: faker.datatype.uuid(), serviceType: sample(DEVICE_SERVICE_TYPE_KEYS) }

        await createTestNotifiableDevice(admin, extraAttrs)

        await expectToThrowMutationError(
            async () => await createTestNotifiableDevice(admin1, extraAttrs),
            DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            ['obj']
        )
    })

    test('admin: update NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const admin1 = await makeLoggedInAdminClient()
        const [objCreated] = await createTestNotifiableDevice(admin)
        const payload = {
            owner: { disconnectAll: true, connect: { id: admin1.user.id } },
            deviceId: objCreated.deviceId,
        }
        const [objUpdated] = await updateTestNotifiableDevice(admin1, objCreated.id, payload)

        expect(objUpdated.id).toEqual(objCreated.id)
        expect(objUpdated.owner.id).toEqual(admin1.user.id)
    })

    test('anonymous: fails to update NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestNotifiableDevice(admin)
        const client = await makeClient()
        const payload = {
            owner: { disconnectAll: true },
            deviceId: objCreated.deviceId,
        }

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestNotifiableDevice(client, objCreated.id, payload)
        })
    })

    test('user: fails to update NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestNotifiableDevice(admin)
        const client = await makeLoggedInClient()
        const payload = {
            owner: { disconnectAll: true },
            deviceId: objCreated.deviceId,
        }

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestNotifiableDevice(client, objCreated.id, payload)
        })
    })

    test('anonymous: fails to delete NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestNotifiableDevice(admin)
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await NotifiableDevice.delete(client, objCreated.id)
        })
    })

    test('user: fails to delete NotifiableDevice', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestNotifiableDevice(admin)
        const client = await makeLoggedInClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await NotifiableDevice.delete(client, objCreated.id)
        })
    })
})
