// noinspection DuplicatedCode

/**
 * Generated by `createservice notification.RegisterPushTokenService --type mutations`
 */

const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient } = require('@core/keystone/test.utils')

const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')

const { registerPushTokenByTestClient } = require('@condo/domains/notification/utils/testSchema')
const { DEVICE_SERVICE_TYPES_KEYS } = require('@condo/domains/notification/constants')
const { getRandomItem } = require('@condo/domains/common/utils/arrays')

const getRandomServiceType = () => getRandomItem(DEVICE_SERVICE_TYPES_KEYS)
const getRandomTokenData = () => ({
    deviceId: faker.datatype.uuid(),
    token: faker.datatype.uuid(),
    serviceType: getRandomServiceType(),
})

describe('RegisterPushTokenService', () => {
    test('anonymous: execute', async () => {
        const client = await makeClient()
        const payload = getRandomTokenData()
        const [data, attrs] = await registerPushTokenByTestClient(client, payload)

        expect(data.id).not.toBeFalsy()
        expect(data.deviceId).toEqual(payload.deviceId)
        expect(data.token).toEqual(payload.token)
        expect(data.serviceType).toEqual(payload.serviceType)
        expect(data.owner).toBeNull()
    })
 
    test('authorized: execute', async () => {
        const client = await makeLoggedInClient()
        const payload = getRandomTokenData()
        const [data] = await registerPushTokenByTestClient(client, payload)

        expect(data.id).not.toBeFalsy()
        expect(data.deviceId).toEqual(payload.deviceId)
        expect(data.token).toEqual(payload.token)
        expect(data.serviceType).toEqual(payload.serviceType)
        expect(data.owner.id).toEqual(client.user.id)
    })
 
    test('admin: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const payload = getRandomTokenData()
        const [data] = await registerPushTokenByTestClient(admin, payload)

        expect(data.id).not.toBeFalsy()
        expect(data.deviceId).toEqual(payload.deviceId)
        expect(data.token).toEqual(payload.token)
        expect(data.serviceType).toEqual(payload.serviceType)
        expect(data.owner.id).toEqual(admin.user.id)
    })
})