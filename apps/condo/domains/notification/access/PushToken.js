// @ts-nocheck
/**
 * Generated by `createschema notification.PushToken PushToken`
 */

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')

async function canReadPushTokens ({ authentication: { item: owner } }) {
    if (!owner) return throwAuthenticationError()
    if (owner.deletedAt) return false
    if (owner.isAdmin) return {}

    return {
        context: {
            OR: [
                {
                    owner: { id: owner.id },
                },
                // may be extended in future
            ],
        },
    }
}

async function canManagePushTokens ({ authentication: { item: owner }, originalInput, operation }) {
    if (owner && owner.deletedAt) return false
    if (owner && owner.isAdmin) return true
    if (operation === 'create') {
        // NOTE: everyone can create push tokens, including anonymous users
        return true
    } else if (operation === 'update') {
        // NOTE: everyone can update every push token if they know deviceId (almost impossible to guess)
        return {
            context: {
                OR: [
                    {
                        deviceId: { id: originalInput.deviceId },
                    },
                    // may be extended in future
                ],
            },
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPushTokens,
    canManagePushTokens,
}
