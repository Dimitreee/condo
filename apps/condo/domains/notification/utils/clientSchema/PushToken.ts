/**
 * Generated by `createschema notification.PushToken PushToken`
 */

import get from 'lodash/get'
import pick from 'lodash/pick'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'
import { PushToken as PushTokenGQL } from '@condo/domains/notification/gql'

import {
    PushToken,
    PushTokenServiceTypeType,
    PushTokenUpdateInput,
    QueryAllPushTokensArgs,
    UserRelateToOneInput,
} from '@app/condo/schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy']
const RELATIONS = []

export interface IPushTokenUIState extends PushToken {
    id: string
}

function convertToUIState (item: PushToken): IPushTokenUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')

    return pick(item, FIELDS) as IPushTokenUIState
}

export interface IPushTokenFormState {
    id?: undefined
    token: string
    deviceId: string
    serviceType?: PushTokenServiceTypeType
    owner?: UserRelateToOneInput
}

function convertToUIFormState (state: IPushTokenUIState): IPushTokenFormState | undefined {
    if (!state) return

    const result = {}

    for (const attr of Object.keys(state)) {
        const attrId = get(state, [attr, 'id'])

        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }

    return result as IPushTokenFormState
}

function convertToGQLInput (state: IPushTokenFormState): PushTokenUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }

    for (const attr of Object.keys(state)) {
        const attrId = get(state, [attr, 'id'])

        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }

    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<PushToken, PushTokenUpdateInput, IPushTokenFormState, IPushTokenUIState, QueryAllPushTokensArgs>(PushTokenGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
