/**
 * Generated by `createschema notification.NotifiableDevice 'deviceId:Text; token?:Text; serviceType?:Select:firebase,apple,huawei; owner?:Relationship:User:SET_NULL; meta?:Json'`
 */

import { pick, get } from 'lodash'

import { NotifiableDevice, NotifiableDeviceUpdateInput, QueryAllNotifiableDevicesArgs } from '@app/condo/schema'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { NotifiableDevice as NotifiableDeviceGQL } from '@condo/domains/notification/gql'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'deviceId', 'token', 'serviceType', 'owner', 'meta']
const RELATIONS = ['owner']

export interface INotifiableDeviceUIState extends NotifiableDevice {
    id: string
}

function convertToUIState (item: NotifiableDevice): INotifiableDeviceUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as INotifiableDeviceUIState
}

export interface INotifiableDeviceFormState {
    id?: undefined
}

function convertToUIFormState (state: INotifiableDeviceUIState): INotifiableDeviceFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as INotifiableDeviceFormState
}

function convertToGQLInput (state: INotifiableDeviceFormState): NotifiableDeviceUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<NotifiableDevice, NotifiableDeviceUpdateInput, INotifiableDeviceFormState, INotifiableDeviceUIState, QueryAllNotifiableDevicesArgs>(NotifiableDeviceGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
